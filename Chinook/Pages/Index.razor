@page "/"
@attribute [Authorize]
@inject IArtistService _artistService;

@using Chinook.ClientModels;
@using Chinook.Services;

<PageTitle>Index</PageTitle>

<h1>Artists</h1>

<div style="margin-bottom: 10px">
    <input type="text" placeholder="Search" @bind="SearchText" />
</div>

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <div class="@AlertCssClass fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @ErrorMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAlertMessage"></button>
        </div>
    </div>
}

@if (Artists == null)
{
    <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in Artists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.Albums.Count()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Artist> Artists = new();
    private string ErrorMessage;
    private string AlertCssClass;

    private string searchText = string.Empty;
    public string SearchText
    {
        get { return searchText; }
        set
        {
            searchText = value.Trim();
            SearchArtists(searchText);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await InvokeAsync(StateHasChanged);
            Artists = await _artistService.GetArtists();
        }
        catch (Exception e)
        {
            DisplayErrorMessage(e);
        }
    }

    private async void SearchArtists(string searchText)
    {
        try
        {
            Artists = await _artistService.SearchArtists(searchText);
        }
        catch (Exception e)
        {
            DisplayErrorMessage(e);
        }
    }

    private void DisplayErrorMessage(Exception e)
    {
        CloseAlertMessage();

        if (e != null && !string.IsNullOrEmpty(e.Message))
        {
            AlertCssClass = "alert alert-danger";
            ErrorMessage = e.Message;
        }
    }

    private void CloseAlertMessage()
    {
        ErrorMessage = "";
    }
}
