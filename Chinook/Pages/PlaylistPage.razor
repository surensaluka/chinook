@page "/playlist/{PlaylistId:long}"
@attribute [Authorize]
@inject IPlaylistService _playlistService;
@inject ITrackService _trackService;

@using Chinook.Services;
@using Chinook.Utility;
@using System.Security.Claims;

@if (Playlist != null)
{
    <h1>Playlist <strong>@Playlist.Name</strong></h1>
}

@if (!string.IsNullOrWhiteSpace(InfoMessage) || !string.IsNullOrWhiteSpace(ErrorMessage))
{
    <div class="@AlertCssClass fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
                @ErrorMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAlertMessage"></button>
        </div>
    </div>
}

@if (Playlist == null)
{
    <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Track</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in Playlist.Tracks)
            {
                <tr>
                    <td>@track.ArtistName - @track.AlbumTitle - @track.TrackName</td>
                    <td>
                        <div class="d-flex">
                            @if (track.IsFavorite)
                            {
                                <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                            }
                            else
                            {
                                <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                            }

                            @if (Playlist.Name != AppConstants.Favorites)
                            {
                                <a href="#" class="m-1" title="Remove from this playlist" @onclick="@(() => RemoveTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-trash"></i></a>
                            }
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public long PlaylistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    private Chinook.ClientModels.Playlist Playlist;
    private string InfoMessage;
    private string ErrorMessage;
    private string AlertCssClass;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await InvokeAsync(StateHasChanged);
            await LoadPlayListWithTracks();
        }
        catch (Exception e)
        {
            DisplayErrorMessage(e);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            await LoadPlayListWithTracks();
        }
        catch (Exception e)
        {
            DisplayErrorMessage(e);
        }
    }

    private async Task LoadPlayListWithTracks()
    {
        Playlist = await _playlistService.GetPlaylistById(PlaylistId, await GetUserId());
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async void FavoriteTrack(long trackId)
    {
        try
        {
            var track = await _trackService.ToggleFavoriteTrack(trackId, true, await GetUserId());
            await LoadPlayListWithTracks();
            DisplayInfoMessage($"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist {AppConstants.Favorites}.");
        }
        catch (Exception e)
        {
            DisplayErrorMessage(e);
        }
    }

    private async void UnfavoriteTrack(long trackId)
    {
        try
        {
            var track = await _trackService.ToggleFavoriteTrack(trackId, false, await GetUserId());
            await LoadPlayListWithTracks();
            StateHasChanged();
            DisplayInfoMessage($"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist {AppConstants.Favorites}.");
        }
        catch (Exception e)
        {
            DisplayErrorMessage(e);
        }
    }

    private async void RemoveTrack(long trackId)
    {
        try
        {
            var track = await _trackService.RemoveTrackFromPlaylist(trackId, PlaylistId);
            await LoadPlayListWithTracks();
            DisplayInfoMessage($"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist {Playlist.Name}.");
        }
        catch (Exception e)
        {
            DisplayErrorMessage(e);
        }
    }

    private void DisplayInfoMessage(string message)
    {
        CloseAlertMessage();

        if (!string.IsNullOrEmpty(message))
        {
            AlertCssClass = "alert alert-info";
            InfoMessage = message;
        }
    }

    private void DisplayErrorMessage(Exception e)
    {
        CloseAlertMessage();

        if (e != null && !string.IsNullOrEmpty(e.Message))
        {
            AlertCssClass = "alert alert-danger";
            ErrorMessage = e.Message;
        }
    }

    private void CloseAlertMessage()
    {
        InfoMessage = "";
        ErrorMessage = "";
    }
}